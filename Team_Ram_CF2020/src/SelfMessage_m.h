//
// Generated file, do not edit! Created by nedtool 5.6 from SelfMessage.msg.
//

#ifndef __SELFMESSAGE_M_H
#define __SELFMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    enum SM_Type{
        SM_Init,
        SM_Timer,
        SM_Send
    };
// }}

/**
 * Class generated from <tt>SelfMessage.msg:28</tt> by nedtool.
 * <pre>
 * packet SelfMessage
 * {
 *     \@customize(true);  // see the generated C++ header for more info
 *     int type;
 *     int time_id;
 * }
 * </pre>
 *
 * SelfMessage_Base is only useful if it gets subclassed, and SelfMessage is derived from it.
 * The minimum code to be written for SelfMessage is the following:
 *
 * <pre>
 * class SelfMessage : public SelfMessage_Base
 * {
 *   private:
 *     void copy(const SelfMessage& other) { ... }

 *   public:
 *     SelfMessage(const char *name=nullptr, short kind=0) : SelfMessage_Base(name,kind) {}
 *     SelfMessage(const SelfMessage& other) : SelfMessage_Base(other) {copy(other);}
 *     SelfMessage& operator=(const SelfMessage& other) {if (this==&other) return *this; SelfMessage_Base::operator=(other); copy(other); return *this;}
 *     virtual SelfMessage *dup() const override {return new SelfMessage(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from SelfMessage_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(SelfMessage)
 * </pre>
 */
class SelfMessage_Base : public ::omnetpp::cPacket
{
  protected:
    int type;
    int time_id;

  private:
    void copy(const SelfMessage_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SelfMessage_Base&);
    // make constructors protected to avoid instantiation
    // make assignment operator protected to force the user override it
    SelfMessage_Base& operator=(const SelfMessage_Base& other);

  public:
    SelfMessage_Base(const char *name=nullptr, short kind=0);
    SelfMessage_Base(const SelfMessage_Base& other);
    virtual ~SelfMessage_Base();
    virtual SelfMessage_Base *dup() const override {return new SelfMessage_Base(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
    virtual int getTime_id() const;
    virtual void setTime_id(int time_id);
};


#endif // ifndef __SELFMESSAGE_M_H

